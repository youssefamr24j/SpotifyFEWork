{"ast":null,"code":"var _jsxFileName = \"D:\\\\Rehab\\\\Studies\\\\Senior 1\\\\Semester 2\\\\Software Engineering\\\\SpotifyFEWork\\\\src\\\\Components\\\\Recover.js\";\nimport React, { Component } from \"react\";\nimport \"./Recover.css\"; //--This to handle only one list to delete and recover :\n\nclass Recoverplaylist extends Component {\n  constructor(props) {\n    super(props);\n\n    this.restoreData = e => {\n      this.setState({\n        onTable: false,\n        onHeader: true\n      });\n      alert(\"Playlist RESTORED\"); //must return data again to the server by post request \n    };\n\n    this.state = {\n      deletedLists: [{\n        date: 2 / 4,\n        title: 'singer1',\n        songs: 5\n      } //this array must be empty when integrating with real data to fill it with data from server\n      ],\n      onTable: true,\n      //to visualize table of deleted playlist.. if data exist set this manually to true..it will change atoumatically when there's real data from server in handling function below\n      onHeader: false //to visualize that no deleted playlist set this manually to true..it will change atoumatically when there's real data from server in handling function below\n\n    };\n  } //-----------here fetch data from server to the deleted lists array (deletedLists must be handeled in backend)\n  //  componentDidMount() {\n  //    fetch('...................')\n  //    .then(response => {\n  //      response.json\n  //    })\n  //    .then(deletedlists => {\n  //      this.setState({\n  //       deletedLists:deletedlists,\n  //       loaded:true\n  //      })\n  //    });\n  //  }\n  //-------------Handling Recovering Playlist\n  // handling = e => {\n  //  if(user array is not empty fetched with data from the above function)//get data heree from server using if condition \n  //   {\n  //     this.setState({onTable:true}) //therefore it will render table content on the screen\n  //   }\n  //    else {\n  //      this.setState({onHeader:true})\n  //   }\n  // }\n\n\n  renderTableData() {\n    //there's a deleted playlist\n    if (this.state.deletedLists) {\n      return this.state.deletedLists.map((deletedLists, index) => {\n        const {\n          date,\n          title,\n          songs\n        } = deletedLists; //destructuring\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 12\n          }\n        }, /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 11\n          }\n        }, \"DELETED\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 11\n          }\n        }, \"TITLE\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 11\n          }\n        }, \"SONGS\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }\n        }, \"RESTORE\")), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 16\n          }\n        }, date), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 16\n          }\n        }, title), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 16\n          }\n        }, songs), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 16\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          className: \"restor\",\n          onClick: this.restoreData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 16\n          }\n        }, \"RESTORE\")));\n      });\n    }\n  }\n\n  render() {\n    // must call handling function here to know the state of onTable and onHeader before entering\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        paddingBottom: 300\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 19\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"header\", {\n      className: \"heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, \"Recover playlists\"), \" \", /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"header\", {\n      className: \"statment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, this.state.onHeader ? \"You haven't deleted any playlists\" : null), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, this.state.on, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, this.state.onTable ? \"Accidentally deleted a playlist?No worries, find the deleted playlist you'de like to recover below and click RESTORE to recover it.\" : null), /*#__PURE__*/React.createElement(\"table\", {\n      id: \"deletedLists\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 16\n      }\n    }, this.state.onTable ? this.renderTableData() : null))), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 35\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"header\", {\n      className: \"styling\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, \"Help improve your account experience.\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"header\", {\n      className: \"ques\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, \"Do you find what you looking for?\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"radio\",\n      type: \"radio\",\n      onClick: () => alert(\"Thanks for your response\"),\n      name: \"enable\",\n      value: \"yes\",\n      checked: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      id: \"forlabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, \"Yes\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"radio\",\n      type: \"radio\",\n      onClick: () => alert(\"Send your complains to spotify service center!\"),\n      name: \"enable\",\n      value: \"no\",\n      checked: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      id: \"forlabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, \"No\"));\n  }\n\n}\n\nexport default Recoverplaylist;","map":{"version":3,"sources":["D:/Rehab/Studies/Senior 1/Semester 2/Software Engineering/SpotifyFEWork/src/Components/Recover.js"],"names":["React","Component","Recoverplaylist","constructor","props","restoreData","e","setState","onTable","onHeader","alert","state","deletedLists","date","title","songs","renderTableData","map","index","render","paddingBottom","on"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Recover.css\";\r\n\r\n//--This to handle only one list to delete and recover :\r\nclass Recoverplaylist extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            deletedLists: [\r\n              { date:2/4, title: 'singer1', songs: 5}\r\n               //this array must be empty when integrating with real data to fill it with data from server\r\n              \r\n              ],\r\n            onTable:true, //to visualize table of deleted playlist.. if data exist set this manually to true..it will change atoumatically when there's real data from server in handling function below\r\n            onHeader:false //to visualize that no deleted playlist set this manually to true..it will change atoumatically when there's real data from server in handling function below\r\n\r\n        };\r\n    }\r\n     //-----------here fetch data from server to the deleted lists array (deletedLists must be handeled in backend)\r\n    //  componentDidMount() {\r\n  //    fetch('...................')\r\n  //    .then(response => {\r\n  //      response.json\r\n  //    })\r\n  //    .then(deletedlists => {\r\n  //      this.setState({\r\n  //       deletedLists:deletedlists,\r\n  //       loaded:true\r\n  //      })\r\n       \r\n  //    });\r\n  //  }\r\n\r\n    //-------------Handling Recovering Playlist\r\n      // handling = e => {\r\n      \r\n      //  if(user array is not empty fetched with data from the above function)//get data heree from server using if condition \r\n      //   {\r\n      //     this.setState({onTable:true}) //therefore it will render table content on the screen\r\n      \r\n      //   }\r\n      //    else {\r\n      //      this.setState({onHeader:true})\r\n      //   }\r\n\r\n      // }\r\n\r\n\r\n    restoreData = e => {\r\n      this.setState({onTable:false,onHeader:true})\r\n      alert(\"Playlist RESTORED\")\r\n      //must return data again to the server by post request \r\n      }\r\n    renderTableData() {\r\n        //there's a deleted playlist\r\n      if(this.state.deletedLists){\r\n        \r\n      return this.state.deletedLists.map((deletedLists, index) => {\r\n         const { date, title, songs } = deletedLists //destructuring\r\n         \r\n         return (\r\n           <div>\r\n          <tr>\r\n          <th>DELETED</th>\r\n          <th>TITLE</th>\r\n          <th>SONGS</th>\r\n          <th>RESTORE</th>\r\n          </tr>\r\n               <td>{date}</td>\r\n               <td>{title}</td>\r\n               <td>{songs}</td>\r\n               <td>\r\n               <button className=\"restor\" onClick={this.restoreData}>\r\n          RESTORE\r\n        </button>\r\n              </td>\r\n               </div>     \r\n            \r\n         )\r\n      })\r\n    }\r\n   }\r\n    \r\n   \r\n\r\n   \r\n  \r\n\r\n\r\n\r\n\r\n        render() {\r\n         \r\n           // must call handling function here to know the state of onTable and onHeader before entering\r\n    return (\r\n        \r\n      <div style={{paddingBottom:300}} >\r\n        <br></br> <br></br> <br></br> <br></br>\r\n        <header className=\"heading\">\r\n       \r\n           Recover playlists</header> <hr/>\r\n\r\n        <header className=\"statment\" >\r\n            {this.state.onHeader? \"You haven't deleted any playlists\":null}\r\n        </header> \r\n\r\n        <div> \r\n        {this.state.on}\r\n        <header className=\"table\">\r\n        {this.state.onTable?\"Accidentally deleted a playlist?No worries, find the deleted playlist you'de like to recover below and click RESTORE to recover it.\":null}\r\n        </header>\r\n        <table id='deletedLists'>\r\n               <tbody>\r\n                  { this.state.onTable ? this.renderTableData():null} \r\n                  \r\n               </tbody>\r\n            </table>\r\n        \r\n       </div> <br></br> <br></br> <br></br> <br></br>\r\n\r\n\r\n\r\n\r\n\r\n        <header className=\"styling\">\r\n            Help improve your account experience. \r\n        </header>\r\n        <br></br>\r\n        <header className=\"ques\">\r\n            Do you find what you looking for?\r\n        </header>\r\n\r\n        <input className=\"radio\" type=\"radio\" onClick={()=>alert(\"Thanks for your response\")}  name=\"enable\" value=\"yes\" checked /> \r\n        <label id=\"forlabel\">Yes</label> <br></br>\r\n        <input className=\"radio\" type=\"radio\" onClick={()=>alert(\"Send your complains to spotify service center!\")}  name=\"enable\" value=\"no\" checked/>\r\n        <label id=\"forlabel\">No</label>\r\n  \r\n       \r\n\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default Recoverplaylist;\r\n"]},"metadata":{},"sourceType":"module"}